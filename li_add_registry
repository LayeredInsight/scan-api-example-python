#!/usr/bin/env python
# Copyright (C) 2018 Layered Insight - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential

from __future__ import print_function
import argparse
import sys
import swagger_client
from swagger_client.rest import ApiException
from vyper import v
from li_utils.envtools import env_setup

env_setup()

# Parse CLI
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="Verbose logging", action="store_true")
parser.add_argument("--name", help="Name of registry to add", required=True)
parser.add_argument("--url", help="URL of registry to add", required=True)
parser.add_argument("--username", help="Username to authenticate to registry with", required=False)
parser.add_argument("--password", help="Password to authenticate to registry with", required=False)
args = parser.parse_args()

swagger_client.configuration.api_key['Authorization'] = v.get("api_key")

registry_api = swagger_client.RegistryApi()
registry_api.api_client.host = v.get("api_host")
registry = swagger_client.Registry(name=args.name)
registry.type = "docker.io"
registry.url = args.url
if args.username:
    registry.username = args.username
if args.password:
    registry.password = args.password

if args.verbose:
    print("Adding registry %s to API host %s..." % (args.name, v.get("api_host")))
try:
    registry = registry_api.add_registry(registry)
except ApiException as e:
    print("Exception when calling RegistryApi->add_registry: %s\n" % e)
    sys.exit()

if args.verbose:
    print("Registry added successfully.")
